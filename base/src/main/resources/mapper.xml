<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.abondar.experimental.wsboard.base.dao.DataMapper">

    <sql id="userTable">
        wsuser usr
    </sql>

    <sql id="projectTable">
        project prj
    </sql>

    <sql id="taskTable">
        task ts
    </sql>

    <sql id="contributorTable">
        contributor ctr
    </sql>


    <resultMap id="userMap" type="User">
        <id column="id" property="id"/>
        <result column="login" property="login"/>
        <result column="email" property="email"/>
        <result column="first_name" property="firstName"/>
        <result column="last_name" property="lastName"/>
        <result column="password" property="password"/>
        <result column="roles" property="roles"/>
    </resultMap>

    <resultMap id="projectMap" type="Project">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="repository" property="repository"/>
        <result column="is_active" property="isActive"/>
    </resultMap>

    <resultMap id="contributorMap" type="Contributor">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="project_id" property="projectId"/>
        <result column="is_owner" property="isOwner"/>
    </resultMap>

    <resultMap id="taskMap" type="Task">
        <id column="id" property="id"/>
        <result column="contributor_id" property="contributorId"/>
        <result column="task_state" property="taskState"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
    </resultMap>


    <insert id="insertUpdateUser" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO wsuser (login, email, first_name, last_name, password, roles)
        VALUES (#{user.login},
                #{user.email},
                #{user.firstName},
                #{user.lastName},
                #{user.password},
                #{user.roles})
        ON CONFLICT (id) DO UPDATE SET
            login = #{user.login},
            email = #{user.email},
            first_name = #{user.firstName},
            last_name = #{user.lastName},
            password = #{user.password},
            roles = #{user.roles};
    </insert>

    <insert id="insertUpdateProject" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO project (name, start_date, end_date, repository, is_active)
        VALUES (#{project.name},
                #{project.startDate},
                #{project.endDate},
                #{project.repository},
                #{project.isActive})
        ON CONFLICT (id) DO UPDATE SET
            name = #{project.name},
            start_date = #{project.startDate},
            end_date = #{project.endDate},
            repository = #{project.repository},
            is_active = #{project.isActive}
    </insert>

    <insert id="insertUpdateContributor" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO contributor (user_id, project_id, is_owner)
        VALUES (#{contributor.userId},
                #{contributor.projectId},
                #{contributor.isOwner})
        ON CONFLICT (id) DO UPDATE SET
            user_id = #{contributor.userId},
            project_id = #{contributor.projectId},
            is_owner = #{contributor.isOwner}

    </insert>


    <insert id="insertUpdateTask" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO task (contributor_id, task_state, start_date, end_date)
        VALUES (#{task.contributorId},
                #{task.taskState},
                #{task.startDate},
                #{task.endDate})
        ON CONFLICT (id) DO UPDATE SET
            contributor_id = #{task.contributorId},
            task_state = #{task.taskState},
            start_date = #{task.startDate},
            end_date = #{task.endDate}
    </insert>

    <select id="getUserByLogin" resultMap="userMap">
        SELECT *
        FROM
        <include refid="userTable"/>
        WHERE usr.login=#{login}
    </select>

    <select id="getUserById" resultMap="userMap">
        SELECT *
        FROM
        <include refid="userTable"/>
        WHERE usr.id=#{id}
    </select>

    <select id="getProjectById" resultMap="projectMap">
        SELECT *
        FROM
        <include refid="projectTable"/>
        WHERE prj.id=#{id}
    </select>

    <select id="getProjectByName" resultMap="projectMap">
        SELECT *
        FROM
        <include refid="projectTable"/>
        WHERE prj.name=#{name}
    </select>


    <select id="getProjectOwner" resultMap="userMap">
        SELECT *
        FROM
        <include refid="userTable"/>

        JOIN
        <include refid="contributorTable"/>
        ON ctr.user_id = usr.id

        JOIN
        <include refid="projectTable"/>
        ON prj.id = ctr.project_id

        WHERE prj.id=#{projectId} and ctr.is_owner=true
    </select>


    <select id="getContributorsForProject" resultMap="userMap">
        SELECT *
        FROM
        <include refid="userTable"/>

        JOIN
        <include refid="contributorTable"/>
        ON ctr.user_id = usr.id

        JOIN
        <include refid="projectTable"/>
        ON prj.id = ctr.project_id

        WHERE prj.id=#{projectId}
        OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTaskById" resultMap="taskMap">
        SELECT *
        FROM
        <include refid="taskTable"/>
        WHERE ts.id=#{id}
    </select>

    <select id="getTasksForProject" resultMap="taskMap">
        SELECT *
        FROM
        <include refid="taskTable"/>

        JOIN
        <include refid="contributorTable"/>
        ON ctr.id = ts.contributor_id

        WHERE ctr.project_id=#{projectId}
        OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTasksForContributor" resultMap="taskMap">
        SELECT *
        FROM
        <include refid="taskTable"/>

        JOIN
        <include refid="contributorTable"/>
        ON ctr.id = ts.contributor_id

        WHERE ctr.id=#{contributorId}
        OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTasksForUser" resultMap="taskMap">
        SELECT *
        FROM
        <include refid="taskTable"/>

        JOIN
        <include refid="contributorTable"/>
        ON ctr.id = ts.contributor_id

        JOIN
        <include refid="userTable"/>
        ON usr.id = ctr.user_id

        WHERE usr.id=#{userId}
        OFFSET #{offset}
        LIMIT #{limit}
    </select>


    <delete id="deleteUsers">
        DELETE FROM
        <include refid="userTable"/>
    </delete>

    <delete id="deleteProjects">
        DELETE FROM
        <include refid="projectTable"/>
    </delete>

    <delete id="deleteProject">
        DELETE FROM
        <include refid="projectTable"/>
        WHERE prj.id=#{id}
    </delete>

    <delete id="deleteContributors">
        DELETE FROM
        <include refid="contributorTable"/>
    </delete>

    <delete id="deleteContributor">
        DELETE FROM
        <include refid="contributorTable"/>
        WHERE ctr.id=#{id}
    </delete>


    <delete id="deleteTasks">
        DELETE FROM
        <include refid="taskTable"/>
    </delete>

    <delete id="deleteTask">
        DELETE FROM
        <include refid="taskTable"/>
        WHERE ts.id=#{id}
    </delete>


</mapper>