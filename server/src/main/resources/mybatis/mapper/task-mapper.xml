<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.abondar.experimental.wsboard.server.mapper.TaskMapper">

    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        <property name="timeToIdleSeconds" value="500"/>
        <property name="timeToLiveSeconds" value="500"/>
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="maxEntriesLocalDisk" value="10000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>

    <resultMap id="taskMap" type="org.abondar.experimental.wsboard.server.datamodel.task.Task">
        <id column="id" property="id"/>
        <result column="contributor_id" property="contributorId"/>
        <result column="task_state" property="taskState"/>
        <result column="prev_state" property="prevState"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="story_points" property="storyPoints"/>
        <result column="sprint_id" property="sprintId"/>
        <result column="dev_ops_enabled" property="devOpsEnabled"/>
        <result column="task_name" property="taskName"/>
        <result column="task_description" property="taskDescription"/>

    </resultMap>

    <insert id="insertTask" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO task (contributor_id, start_date, dev_ops_enabled, task_name, task_description)
        VALUES (#{task.contributorId},
                #{task.startDate},
                #{task.devOpsEnabled},
                #{task.taskName},
                #{task.taskDescription})
        ON CONFLICT (id) DO NOTHING;
    </insert>

    <update id="updateTask" useGeneratedKeys="true" keyColumn="id">
        UPDATE task
        SET contributor_id   = #{task.contributorId},
            dev_ops_enabled  = #{task.devOpsEnabled},
            story_points     = #{task.storyPoints},
            end_date         = #{task.endDate},
            task_state       = #{task.taskState},
            prev_state       = #{task.prevState},
            task_name        = #{task.taskName},
            task_description = #{task.taskDescription}
        WHERE id = #{task.id}
    </update>

    <update id="updateTaskSprint">
        UPDATE task
        SET sprint_id = #{sprintId}
        WHERE id = #{id}
    </update>

    <update id="updateTasksSprint">
        UPDATE task
        SET sprint_id = #{sprintId}
        WHERE id IN
        <foreach item='id' index='index' collection='idList' open='(' separator=',' close=')'>
            #{id}
        </foreach>
    </update>

    <select id="getTaskById" resultMap="taskMap">
        SELECT *
        FROM task
        WHERE id = #{id}
    </select>

    <select id="getTasksForProject" resultMap="taskMap" useCache="true">
        SELECT *
        FROM task ts
                 JOIN contributor ctr ON ctr.id = ts.contributor_id
        WHERE ctr.project_id = #{projectId}
        ORDER BY ts.id
            OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTasksForContributor" resultMap="taskMap" useCache="true">
        SELECT *
        FROM task ts
                 JOIN contributor ctr ON ctr.id = ts.contributor_id
        WHERE ctr.id = #{contributorId}
        ORDER BY ts.id
            OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTasksForUser" resultMap="taskMap" useCache="true">
        SELECT *
        FROM task ts
                 JOIN contributor ctr ON ctr.id = ts.contributor_id
                 JOIN wsuser usr on ctr.user_id = usr.id
        WHERE usr.id = #{userId}
        ORDER BY ts.id
            OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="getTasksForSprint" resultMap="taskMap" useCache="true">
        SELECT *
        FROM task
        WHERE sprint_id = #{sprintId}
        ORDER BY id
            OFFSET #{offset}
        LIMIT #{limit}
    </select>

    <select id="countUserTasks" resultType="integer" useCache="true">
        SELECT count(ts.id)
        FROM task ts
                 JOIN contributor ctr on ts.contributor_id = ctr.id
        WHERE ctr.user_id = #{userId};
    </select>

    <select id="countContributorTasks" resultType="integer" useCache="true">
        SELECT count(id)
        FROM task
        WHERE contributor_id = #{ctrId};
    </select>

    <select id="countSprintTasks" resultType="Integer">
        SELECT count(id)
        FROM task
        WHERE sprint_id = #{spId};
    </select>

    <delete id="deleteProjectTasks">
        DELETE
        FROM task ts
            USING contributor ctr
        WHERE ts.contributor_id = ctr.id
          AND ctr.project_id = #{projectId}
    </delete>

    <delete id="deleteTask">
        DELETE
        FROM task
        WHERE id = #{id}
    </delete>

</mapper>
